/* Bootstrap override */

// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: $line-height-computed;
  font-size: ($font-size-base * 1.5);
  line-height: inherit;
  color: $legend-color;
  border: 0;
  border-bottom: 1px solid $legend-border-color;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
  font-weight: bold;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  @include box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  @include tab-focus;
}

// Adjust output element
output {
  display: block;
  padding-top: ($padding-base-vertical + 1);
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;
  width: 100%;
  height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: $padding-base-vertical $padding-base-horizontal;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $input-border;
  border-radius: $input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus;

  // Placeholder
  @include placeholder;

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    border: 0;
    background-color: transparent;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }

  // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
}


.webform-client-form {
    /* @extend .form-horizontal; */
    /* label { */
    /*     @extend .control-label; */
    /*     @extend .col-sm-3; */
    /* } */
    .grippi {
    }
    .webform-component-number,
    .webform-component-checkboxes {
        @extend .form-inline;
    }
    .webform-component-number label {
        @extend .col-sm-3;
        margin-top: 5px;
        padding-left: 0;
    }
    
    .form-item {
        @extend .form-group;
    }
    input[type=text],
    input[type=email],
    select, textarea {
        @extend .form-control;
    }
    .form-type-checkbox {
        
    }
    .form-managed-file {
        
    }
    .form-actions {
        input[type=submit] {
            @extend .btn;
            @extend .btn-primary;
        }
    }
}

select {
    max-width: 100%;
}

#section-header {
    #block-search-form {
        margin: 1em 5em 0 0;
        padding: 5px 10px 3px 5px;
        float: right;
        z-index: 500;
        background-color: rgba(255, 255, 255, 0.6);

        .container-inline div {
            display: inline-block;
            margin: 0;

        input {
            background-color: inherit;
            border: 0;
        }
        input[type=submit] {
            display: none;
        }
        &.form-actions:after {
             font-family: 'Glyphicons Halflings';
             content: "\e003";
        }
}
    }
}
html.js fieldset.collapsed {
    height: auto;
}

.page-user.not-logged-in {
    /* #section-header, */
    #main-wrapper {
        padding: 0;
        max-width: 40em;
        margin: 0 auto;

        /* min-width: 600px; */
        /* text-align: center; */
        /* border: 1px solid $grey-light; */
        /* border-radius: 0.25em; */
    }
}
.contact-form {
    label {
        display: inline-block;
        min-width: 150px;
    }
}